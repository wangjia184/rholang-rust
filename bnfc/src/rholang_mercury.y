/* This Bison file was machine-generated by BNFC */

/* Turn on line/column tracking in the rholang_mercury_lloc structure: */
%locations

%{
/* Begin C preamble code */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "Absyn.h"

#define YYMAXDEPTH 10000000

typedef struct rholang_mercury__buffer_state *YY_BUFFER_STATE;
YY_BUFFER_STATE rholang_mercury__scan_string(const char *str);
void rholang_mercury__delete_buffer(YY_BUFFER_STATE buf);
extern int yyparse(void);
extern int yylex(void);
extern int rholang_mercury__init_lexer(FILE * inp);
extern void yyerror(const char *str);

ListProc reverseListProc(ListProc l)
{
  ListProc prev = 0;
  ListProc tmp = 0;
  while (l)
  {
    tmp = l->listproc_;
    l->listproc_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListName reverseListName(ListName l)
{
  ListName prev = 0;
  ListName tmp = 0;
  while (l)
  {
    tmp = l->listname_;
    l->listname_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListLinearBind reverseListLinearBind(ListLinearBind l)
{
  ListLinearBind prev = 0;
  ListLinearBind tmp = 0;
  while (l)
  {
    tmp = l->listlinearbind_;
    l->listlinearbind_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListRepeatedBind reverseListRepeatedBind(ListRepeatedBind l)
{
  ListRepeatedBind prev = 0;
  ListRepeatedBind tmp = 0;
  while (l)
  {
    tmp = l->listrepeatedbind_;
    l->listrepeatedbind_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListPeekBind reverseListPeekBind(ListPeekBind l)
{
  ListPeekBind prev = 0;
  ListPeekBind tmp = 0;
  while (l)
  {
    tmp = l->listpeekbind_;
    l->listpeekbind_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListBranch reverseListBranch(ListBranch l)
{
  ListBranch prev = 0;
  ListBranch tmp = 0;
  while (l)
  {
    tmp = l->listbranch_;
    l->listbranch_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListCase reverseListCase(ListCase l)
{
  ListCase prev = 0;
  ListCase tmp = 0;
  while (l)
  {
    tmp = l->listcase_;
    l->listcase_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListNameDecl reverseListNameDecl(ListNameDecl l)
{
  ListNameDecl prev = 0;
  ListNameDecl tmp = 0;
  while (l)
  {
    tmp = l->listnamedecl_;
    l->listnamedecl_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListKeyValuePair reverseListKeyValuePair(ListKeyValuePair l)
{
  ListKeyValuePair prev = 0;
  ListKeyValuePair tmp = 0;
  while (l)
  {
    tmp = l->listkeyvaluepair_;
    l->listkeyvaluepair_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}

/* Global variables holding parse results for entrypoints. */
Proc YY_RESULT_Proc_ = 0;
ListProc YY_RESULT_ListProc_ = 0;
ProcVar YY_RESULT_ProcVar_ = 0;
Name YY_RESULT_Name_ = 0;
ListName YY_RESULT_ListName_ = 0;
Bundle YY_RESULT_Bundle_ = 0;
Receipt YY_RESULT_Receipt_ = 0;
ReceiptLinearImpl YY_RESULT_ReceiptLinearImpl_ = 0;
LinearBind YY_RESULT_LinearBind_ = 0;
ListLinearBind YY_RESULT_ListLinearBind_ = 0;
ReceiptRepeatedImpl YY_RESULT_ReceiptRepeatedImpl_ = 0;
RepeatedBind YY_RESULT_RepeatedBind_ = 0;
ListRepeatedBind YY_RESULT_ListRepeatedBind_ = 0;
ReceiptPeekImpl YY_RESULT_ReceiptPeekImpl_ = 0;
PeekBind YY_RESULT_PeekBind_ = 0;
ListPeekBind YY_RESULT_ListPeekBind_ = 0;
Send YY_RESULT_Send_ = 0;
Branch YY_RESULT_Branch_ = 0;
ListBranch YY_RESULT_ListBranch_ = 0;
Case YY_RESULT_Case_ = 0;
ListCase YY_RESULT_ListCase_ = 0;
NameDecl YY_RESULT_NameDecl_ = 0;
ListNameDecl YY_RESULT_ListNameDecl_ = 0;
BoolLiteral YY_RESULT_BoolLiteral_ = 0;
Ground YY_RESULT_Ground_ = 0;
Collection YY_RESULT_Collection_ = 0;
KeyValuePair YY_RESULT_KeyValuePair_ = 0;
ListKeyValuePair YY_RESULT_ListKeyValuePair_ = 0;
Tuple YY_RESULT_Tuple_ = 0;
ProcRemainder YY_RESULT_ProcRemainder_ = 0;
NameRemainder YY_RESULT_NameRemainder_ = 0;
VarRefKind YY_RESULT_VarRefKind_ = 0;
SimpleType YY_RESULT_SimpleType_ = 0;

/* Entrypoint: parse Proc from file. */
Proc pProc(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc1(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc1(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc2(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc2(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc3(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc3(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc4(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc4(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc5(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc5(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc6(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc6(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc7(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc7(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc8(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc8(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc9(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc9(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc10(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc10(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc11(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc11(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc12(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc12(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc13(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc13(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc14(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc14(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc15(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc15(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from file. */
Proc pProc16(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse Proc from string. */
Proc psProc16(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Proc_;
  }
}

/* Entrypoint: parse ListProc from file. */
ListProc pListProc(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListProc_;
  }
}

/* Entrypoint: parse ListProc from string. */
ListProc psListProc(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListProc_;
  }
}

/* Entrypoint: parse ProcVar from file. */
ProcVar pProcVar(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ProcVar_;
  }
}

/* Entrypoint: parse ProcVar from string. */
ProcVar psProcVar(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ProcVar_;
  }
}

/* Entrypoint: parse Name from file. */
Name pName(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Name_;
  }
}

/* Entrypoint: parse Name from string. */
Name psName(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Name_;
  }
}

/* Entrypoint: parse ListName from file. */
ListName pListName(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListName_;
  }
}

/* Entrypoint: parse ListName from string. */
ListName psListName(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListName_;
  }
}

/* Entrypoint: parse Bundle from file. */
Bundle pBundle(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Bundle_;
  }
}

/* Entrypoint: parse Bundle from string. */
Bundle psBundle(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Bundle_;
  }
}

/* Entrypoint: parse Receipt from file. */
Receipt pReceipt(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Receipt_;
  }
}

/* Entrypoint: parse Receipt from string. */
Receipt psReceipt(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Receipt_;
  }
}

/* Entrypoint: parse ReceiptLinearImpl from file. */
ReceiptLinearImpl pReceiptLinearImpl(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ReceiptLinearImpl_;
  }
}

/* Entrypoint: parse ReceiptLinearImpl from string. */
ReceiptLinearImpl psReceiptLinearImpl(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ReceiptLinearImpl_;
  }
}

/* Entrypoint: parse LinearBind from file. */
LinearBind pLinearBind(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LinearBind_;
  }
}

/* Entrypoint: parse LinearBind from string. */
LinearBind psLinearBind(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_LinearBind_;
  }
}

/* Entrypoint: parse ListLinearBind from file. */
ListLinearBind pListLinearBind(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListLinearBind_;
  }
}

/* Entrypoint: parse ListLinearBind from string. */
ListLinearBind psListLinearBind(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListLinearBind_;
  }
}

/* Entrypoint: parse ReceiptRepeatedImpl from file. */
ReceiptRepeatedImpl pReceiptRepeatedImpl(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ReceiptRepeatedImpl_;
  }
}

/* Entrypoint: parse ReceiptRepeatedImpl from string. */
ReceiptRepeatedImpl psReceiptRepeatedImpl(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ReceiptRepeatedImpl_;
  }
}

/* Entrypoint: parse RepeatedBind from file. */
RepeatedBind pRepeatedBind(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RepeatedBind_;
  }
}

/* Entrypoint: parse RepeatedBind from string. */
RepeatedBind psRepeatedBind(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RepeatedBind_;
  }
}

/* Entrypoint: parse ListRepeatedBind from file. */
ListRepeatedBind pListRepeatedBind(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListRepeatedBind_;
  }
}

/* Entrypoint: parse ListRepeatedBind from string. */
ListRepeatedBind psListRepeatedBind(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListRepeatedBind_;
  }
}

/* Entrypoint: parse ReceiptPeekImpl from file. */
ReceiptPeekImpl pReceiptPeekImpl(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ReceiptPeekImpl_;
  }
}

/* Entrypoint: parse ReceiptPeekImpl from string. */
ReceiptPeekImpl psReceiptPeekImpl(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ReceiptPeekImpl_;
  }
}

/* Entrypoint: parse PeekBind from file. */
PeekBind pPeekBind(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PeekBind_;
  }
}

/* Entrypoint: parse PeekBind from string. */
PeekBind psPeekBind(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_PeekBind_;
  }
}

/* Entrypoint: parse ListPeekBind from file. */
ListPeekBind pListPeekBind(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListPeekBind_;
  }
}

/* Entrypoint: parse ListPeekBind from string. */
ListPeekBind psListPeekBind(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListPeekBind_;
  }
}

/* Entrypoint: parse Send from file. */
Send pSend(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Send_;
  }
}

/* Entrypoint: parse Send from string. */
Send psSend(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Send_;
  }
}

/* Entrypoint: parse Branch from file. */
Branch pBranch(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Branch_;
  }
}

/* Entrypoint: parse Branch from string. */
Branch psBranch(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Branch_;
  }
}

/* Entrypoint: parse ListBranch from file. */
ListBranch pListBranch(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListBranch_;
  }
}

/* Entrypoint: parse ListBranch from string. */
ListBranch psListBranch(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListBranch_;
  }
}

/* Entrypoint: parse Case from file. */
Case pCase(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Case_;
  }
}

/* Entrypoint: parse Case from string. */
Case psCase(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Case_;
  }
}

/* Entrypoint: parse ListCase from file. */
ListCase pListCase(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListCase_;
  }
}

/* Entrypoint: parse ListCase from string. */
ListCase psListCase(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListCase_;
  }
}

/* Entrypoint: parse NameDecl from file. */
NameDecl pNameDecl(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_NameDecl_;
  }
}

/* Entrypoint: parse NameDecl from string. */
NameDecl psNameDecl(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_NameDecl_;
  }
}

/* Entrypoint: parse ListNameDecl from file. */
ListNameDecl pListNameDecl(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListNameDecl_;
  }
}

/* Entrypoint: parse ListNameDecl from string. */
ListNameDecl psListNameDecl(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListNameDecl_;
  }
}

/* Entrypoint: parse BoolLiteral from file. */
BoolLiteral pBoolLiteral(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_BoolLiteral_;
  }
}

/* Entrypoint: parse BoolLiteral from string. */
BoolLiteral psBoolLiteral(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_BoolLiteral_;
  }
}

/* Entrypoint: parse Ground from file. */
Ground pGround(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Ground_;
  }
}

/* Entrypoint: parse Ground from string. */
Ground psGround(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Ground_;
  }
}

/* Entrypoint: parse Collection from file. */
Collection pCollection(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Collection_;
  }
}

/* Entrypoint: parse Collection from string. */
Collection psCollection(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Collection_;
  }
}

/* Entrypoint: parse KeyValuePair from file. */
KeyValuePair pKeyValuePair(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_KeyValuePair_;
  }
}

/* Entrypoint: parse KeyValuePair from string. */
KeyValuePair psKeyValuePair(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_KeyValuePair_;
  }
}

/* Entrypoint: parse ListKeyValuePair from file. */
ListKeyValuePair pListKeyValuePair(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListKeyValuePair_;
  }
}

/* Entrypoint: parse ListKeyValuePair from string. */
ListKeyValuePair psListKeyValuePair(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListKeyValuePair_;
  }
}

/* Entrypoint: parse Tuple from file. */
Tuple pTuple(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Tuple_;
  }
}

/* Entrypoint: parse Tuple from string. */
Tuple psTuple(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Tuple_;
  }
}

/* Entrypoint: parse ProcRemainder from file. */
ProcRemainder pProcRemainder(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ProcRemainder_;
  }
}

/* Entrypoint: parse ProcRemainder from string. */
ProcRemainder psProcRemainder(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ProcRemainder_;
  }
}

/* Entrypoint: parse NameRemainder from file. */
NameRemainder pNameRemainder(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_NameRemainder_;
  }
}

/* Entrypoint: parse NameRemainder from string. */
NameRemainder psNameRemainder(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_NameRemainder_;
  }
}

/* Entrypoint: parse VarRefKind from file. */
VarRefKind pVarRefKind(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_VarRefKind_;
  }
}

/* Entrypoint: parse VarRefKind from string. */
VarRefKind psVarRefKind(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_VarRefKind_;
  }
}

/* Entrypoint: parse SimpleType from file. */
SimpleType pSimpleType(FILE *inp)
{
  rholang_mercury__init_lexer(inp);
  int result = yyparse();
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_SimpleType_;
  }
}

/* Entrypoint: parse SimpleType from string. */
SimpleType psSimpleType(const char *str)
{
  YY_BUFFER_STATE buf;
  rholang_mercury__init_lexer(0);
  buf = rholang_mercury__scan_string(str);
  int result = yyparse();
  rholang_mercury__delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_SimpleType_;
  }
}


/* End C preamble code */
%}

/* The type of a parse result (yylval). */
%union
{
  int    _int;
  char   _char;
  double _double;
  char*  _string;
  Proc proc_;
  ListProc listproc_;
  ProcVar procvar_;
  Name name_;
  ListName listname_;
  Bundle bundle_;
  Receipt receipt_;
  ReceiptLinearImpl receiptlinearimpl_;
  LinearBind linearbind_;
  ListLinearBind listlinearbind_;
  ReceiptRepeatedImpl receiptrepeatedimpl_;
  RepeatedBind repeatedbind_;
  ListRepeatedBind listrepeatedbind_;
  ReceiptPeekImpl receiptpeekimpl_;
  PeekBind peekbind_;
  ListPeekBind listpeekbind_;
  Send send_;
  Branch branch_;
  ListBranch listbranch_;
  Case case_;
  ListCase listcase_;
  NameDecl namedecl_;
  ListNameDecl listnamedecl_;
  BoolLiteral boolliteral_;
  Ground ground_;
  Collection collection_;
  KeyValuePair keyvaluepair_;
  ListKeyValuePair listkeyvaluepair_;
  Tuple tuple_;
  ProcRemainder procremainder_;
  NameRemainder nameremainder_;
  VarRefKind varrefkind_;
  SimpleType simpletype_;
}

%token _ERROR_
%token _SYMB_32    /*   !   */
%token _SYMB_33    /*   !!   */
%token _SYMB_21    /*   !=   */
%token _SYMB_11    /*   %   */
%token _SYMB_12    /*   %%   */
%token _SYMB_7    /*   (   */
%token _SYMB_8    /*   )   */
%token _SYMB_5    /*   *   */
%token _SYMB_13    /*   +   */
%token _SYMB_14    /*   ++   */
%token _SYMB_24    /*   ,   */
%token _SYMB_38    /*   ,)   */
%token _SYMB_9    /*   -   */
%token _SYMB_15    /*   --   */
%token _SYMB_6    /*   .   */
%token _SYMB_39    /*   ...   */
%token _SYMB_10    /*   /   */
%token _SYMB_3    /*   /\\   */
%token _SYMB_37    /*   :   */
%token _SYMB_30    /*   ;   */
%token _SYMB_16    /*   <   */
%token _SYMB_29    /*   <-   */
%token _SYMB_31    /*   <<-   */
%token _SYMB_17    /*   <=   */
%token _SYMB_22    /*   =   */
%token _SYMB_20    /*   ==   */
%token _SYMB_34    /*   =>   */
%token _SYMB_18    /*   >   */
%token _SYMB_19    /*   >=   */
%token _SYMB_26    /*   @   */
%token _SYMB_40    /*   Bool   */
%token _SYMB_41    /*   ByteArray   */
%token _SYMB_42    /*   Int   */
%token _SYMB_43    /*   Nil   */
%token _SYMB_44    /*   Set   */
%token _SYMB_45    /*   String   */
%token _SYMB_46    /*   Uri   */
%token _SYMB_35    /*   [   */
%token _SYMB_4    /*   \\/   */
%token _SYMB_36    /*   ]   */
%token _SYMB_25    /*   _   */
%token _SYMB_47    /*   and   */
%token _SYMB_48    /*   bundle   */
%token _SYMB_27    /*   bundle+   */
%token _SYMB_28    /*   bundle-   */
%token _SYMB_49    /*   bundle0   */
%token _SYMB_50    /*   contract   */
%token _SYMB_51    /*   else   */
%token _SYMB_52    /*   false   */
%token _SYMB_53    /*   for   */
%token _SYMB_54    /*   if   */
%token _SYMB_55    /*   in   */
%token _SYMB_56    /*   match   */
%token _SYMB_57    /*   matches   */
%token _SYMB_58    /*   new   */
%token _SYMB_59    /*   not   */
%token _SYMB_60    /*   or   */
%token _SYMB_61    /*   select   */
%token _SYMB_62    /*   true   */
%token _SYMB_0    /*   {   */
%token _SYMB_23    /*   |   */
%token _SYMB_1    /*   }   */
%token _SYMB_2    /*   ~   */
%token<_string> _SYMB_63    /*   LongLiteral   */
%token<_string> _SYMB_64    /*   StringLiteral   */
%token<_string> _SYMB_65    /*   UriLiteral   */
%token<_string> _SYMB_66    /*   Var   */

%type <proc_> Proc
%type <proc_> Proc1
%type <proc_> Proc2
%type <proc_> Proc3
%type <proc_> Proc4
%type <proc_> Proc5
%type <proc_> Proc6
%type <proc_> Proc7
%type <proc_> Proc8
%type <proc_> Proc9
%type <proc_> Proc10
%type <proc_> Proc11
%type <proc_> Proc12
%type <proc_> Proc13
%type <proc_> Proc14
%type <proc_> Proc15
%type <proc_> Proc16
%type <listproc_> ListProc
%type <procvar_> ProcVar
%type <name_> Name
%type <listname_> ListName
%type <bundle_> Bundle
%type <receipt_> Receipt
%type <receiptlinearimpl_> ReceiptLinearImpl
%type <linearbind_> LinearBind
%type <listlinearbind_> ListLinearBind
%type <receiptrepeatedimpl_> ReceiptRepeatedImpl
%type <repeatedbind_> RepeatedBind
%type <listrepeatedbind_> ListRepeatedBind
%type <receiptpeekimpl_> ReceiptPeekImpl
%type <peekbind_> PeekBind
%type <listpeekbind_> ListPeekBind
%type <send_> Send
%type <branch_> Branch
%type <listbranch_> ListBranch
%type <case_> Case
%type <listcase_> ListCase
%type <namedecl_> NameDecl
%type <listnamedecl_> ListNameDecl
%type <boolliteral_> BoolLiteral
%type <ground_> Ground
%type <collection_> Collection
%type <keyvaluepair_> KeyValuePair
%type <listkeyvaluepair_> ListKeyValuePair
%type <tuple_> Tuple
%type <procremainder_> ProcRemainder
%type <nameremainder_> NameRemainder
%type <varrefkind_> VarRefKind
%type <simpletype_> SimpleType


%start Proc

%%

Proc : Proc1 { $$ = $1; YY_RESULT_Proc_= $$; }
  | Proc _SYMB_23 Proc1 { $$ = make_PPar($1, $3); YY_RESULT_Proc_= $$; }
;
Proc1 : Proc2 { $$ = $1; YY_RESULT_Proc_= $$; }
  | _SYMB_54 _SYMB_7 Proc _SYMB_8 Proc2 { $$ = make_PIf($3, $5); YY_RESULT_Proc_= $$; }
  | _SYMB_54 _SYMB_7 Proc _SYMB_8 Proc2 _SYMB_51 Proc1 { $$ = make_PIfElse($3, $5, $7); YY_RESULT_Proc_= $$; }
  | _SYMB_58 ListNameDecl _SYMB_55 Proc1 { $$ = make_PNew($2, $4); YY_RESULT_Proc_= $$; }
;
Proc2 : Proc3 { $$ = $1; YY_RESULT_Proc_= $$; }
  | _SYMB_50 Name _SYMB_7 ListName NameRemainder _SYMB_8 _SYMB_22 _SYMB_0 Proc _SYMB_1 { $$ = make_PContr($2, $4, $5, $9); YY_RESULT_Proc_= $$; }
  | _SYMB_53 _SYMB_7 Receipt _SYMB_8 _SYMB_0 Proc _SYMB_1 { $$ = make_PInput($3, $6); YY_RESULT_Proc_= $$; }
  | _SYMB_61 _SYMB_0 ListBranch _SYMB_1 { $$ = make_PChoice($3); YY_RESULT_Proc_= $$; }
  | _SYMB_56 Proc4 _SYMB_0 ListCase _SYMB_1 { $$ = make_PMatch($2, $4); YY_RESULT_Proc_= $$; }
  | Bundle _SYMB_0 Proc _SYMB_1 { $$ = make_PBundle($1, $3); YY_RESULT_Proc_= $$; }
;
Proc3 : Proc4 { $$ = $1; YY_RESULT_Proc_= $$; }
  | Name Send _SYMB_7 ListProc _SYMB_8 { $$ = make_PSend($1, $2, $4); YY_RESULT_Proc_= $$; }
;
Proc4 : Proc5 { $$ = $1; YY_RESULT_Proc_= $$; }
  | Proc4 _SYMB_60 Proc5 { $$ = make_POr($1, $3); YY_RESULT_Proc_= $$; }
;
Proc5 : Proc6 { $$ = $1; YY_RESULT_Proc_= $$; }
  | Proc5 _SYMB_47 Proc6 { $$ = make_PAnd($1, $3); YY_RESULT_Proc_= $$; }
;
Proc6 : Proc7 { $$ = $1; YY_RESULT_Proc_= $$; }
  | Proc7 _SYMB_57 Proc7 { $$ = make_PMatches($1, $3); YY_RESULT_Proc_= $$; }
  | Proc6 _SYMB_20 Proc7 { $$ = make_PEq($1, $3); YY_RESULT_Proc_= $$; }
  | Proc6 _SYMB_21 Proc7 { $$ = make_PNeq($1, $3); YY_RESULT_Proc_= $$; }
;
Proc7 : Proc8 { $$ = $1; YY_RESULT_Proc_= $$; }
  | Proc7 _SYMB_16 Proc8 { $$ = make_PLt($1, $3); YY_RESULT_Proc_= $$; }
  | Proc7 _SYMB_17 Proc8 { $$ = make_PLte($1, $3); YY_RESULT_Proc_= $$; }
  | Proc7 _SYMB_18 Proc8 { $$ = make_PGt($1, $3); YY_RESULT_Proc_= $$; }
  | Proc7 _SYMB_19 Proc8 { $$ = make_PGte($1, $3); YY_RESULT_Proc_= $$; }
;
Proc8 : Proc9 { $$ = $1; YY_RESULT_Proc_= $$; }
  | Proc8 _SYMB_13 Proc9 { $$ = make_PAdd($1, $3); YY_RESULT_Proc_= $$; }
  | Proc8 _SYMB_9 Proc9 { $$ = make_PMinus($1, $3); YY_RESULT_Proc_= $$; }
  | Proc8 _SYMB_14 Proc9 { $$ = make_PPlusPlus($1, $3); YY_RESULT_Proc_= $$; }
  | Proc8 _SYMB_15 Proc9 { $$ = make_PMinusMinus($1, $3); YY_RESULT_Proc_= $$; }
;
Proc9 : Proc10 { $$ = $1; YY_RESULT_Proc_= $$; }
  | Proc9 _SYMB_5 Proc10 { $$ = make_PMult($1, $3); YY_RESULT_Proc_= $$; }
  | Proc9 _SYMB_10 Proc10 { $$ = make_PDiv($1, $3); YY_RESULT_Proc_= $$; }
  | Proc9 _SYMB_11 Proc10 { $$ = make_PMod($1, $3); YY_RESULT_Proc_= $$; }
  | Proc9 _SYMB_12 Proc10 { $$ = make_PPercentPercent($1, $3); YY_RESULT_Proc_= $$; }
;
Proc10 : Proc11 { $$ = $1; YY_RESULT_Proc_= $$; }
  | _SYMB_59 Proc10 { $$ = make_PNot($2); YY_RESULT_Proc_= $$; }
  | _SYMB_9 Proc10 { $$ = make_PNeg($2); YY_RESULT_Proc_= $$; }
;
Proc11 : Proc12 { $$ = $1; YY_RESULT_Proc_= $$; }
  | Proc11 _SYMB_6 _SYMB_66 _SYMB_7 ListProc _SYMB_8 { $$ = make_PMethod($1, $3, $5); YY_RESULT_Proc_= $$; }
  | _SYMB_7 Proc4 _SYMB_8 { $$ = make_PExprs($2); YY_RESULT_Proc_= $$; }
;
Proc12 : Proc13 { $$ = $1; YY_RESULT_Proc_= $$; }
  | _SYMB_5 Name { $$ = make_PEval($2); YY_RESULT_Proc_= $$; }
;
Proc13 : Proc14 { $$ = $1; YY_RESULT_Proc_= $$; }
  | VarRefKind _SYMB_66 { $$ = make_PVarRef($1, $2); YY_RESULT_Proc_= $$; }
  | Proc13 _SYMB_4 Proc14 { $$ = make_PDisjunction($1, $3); YY_RESULT_Proc_= $$; }
;
Proc14 : Proc15 { $$ = $1; YY_RESULT_Proc_= $$; }
  | Proc14 _SYMB_3 Proc15 { $$ = make_PConjunction($1, $3); YY_RESULT_Proc_= $$; }
;
Proc15 : Proc16 { $$ = $1; YY_RESULT_Proc_= $$; }
  | _SYMB_2 Proc15 { $$ = make_PNegation($2); YY_RESULT_Proc_= $$; }
;
Proc16 : _SYMB_0 Proc _SYMB_1 { $$ = $2; YY_RESULT_Proc_= $$; }
  | Ground { $$ = make_PGround($1); YY_RESULT_Proc_= $$; }
  | Collection { $$ = make_PCollect($1); YY_RESULT_Proc_= $$; }
  | ProcVar { $$ = make_PVar($1); YY_RESULT_Proc_= $$; }
  | _SYMB_43 { $$ = make_PNil(); YY_RESULT_Proc_= $$; }
  | SimpleType { $$ = make_PSimpleType($1); YY_RESULT_Proc_= $$; }
;
ListProc : /* empty */ { $$ = 0; YY_RESULT_ListProc_= $$; }
  | Proc { $$ = make_ListProc($1, 0); YY_RESULT_ListProc_= $$; }
  | Proc _SYMB_24 ListProc { $$ = make_ListProc($1, $3); YY_RESULT_ListProc_= $$; }
;
ProcVar : _SYMB_25 { $$ = make_ProcVarWildcard(); YY_RESULT_ProcVar_= $$; }
  | _SYMB_66 { $$ = make_ProcVarVar($1); YY_RESULT_ProcVar_= $$; }
;
Name : _SYMB_25 { $$ = make_NameWildcard(); YY_RESULT_Name_= $$; }
  | _SYMB_66 { $$ = make_NameVar($1); YY_RESULT_Name_= $$; }
  | _SYMB_26 Proc12 { $$ = make_NameQuote($2); YY_RESULT_Name_= $$; }
;
ListName : /* empty */ { $$ = 0; YY_RESULT_ListName_= $$; }
  | Name { $$ = make_ListName($1, 0); YY_RESULT_ListName_= $$; }
  | Name _SYMB_24 ListName { $$ = make_ListName($1, $3); YY_RESULT_ListName_= $$; }
;
Bundle : _SYMB_27 { $$ = make_BundleWrite(); YY_RESULT_Bundle_= $$; }
  | _SYMB_28 { $$ = make_BundleRead(); YY_RESULT_Bundle_= $$; }
  | _SYMB_49 { $$ = make_BundleEquiv(); YY_RESULT_Bundle_= $$; }
  | _SYMB_48 { $$ = make_BundleReadWrite(); YY_RESULT_Bundle_= $$; }
;
Receipt : ReceiptLinearImpl { $$ = make_ReceiptLinear($1); YY_RESULT_Receipt_= $$; }
  | ReceiptRepeatedImpl { $$ = make_ReceiptRepeated($1); YY_RESULT_Receipt_= $$; }
  | ReceiptPeekImpl { $$ = make_ReceiptPeek($1); YY_RESULT_Receipt_= $$; }
;
ReceiptLinearImpl : ListLinearBind { $$ = make_LinearSimple($1); YY_RESULT_ReceiptLinearImpl_= $$; }
;
LinearBind : ListName NameRemainder _SYMB_29 Name { $$ = make_LinearBindImpl($1, $2, $4); YY_RESULT_LinearBind_= $$; }
;
ListLinearBind : LinearBind { $$ = make_ListLinearBind($1, 0); YY_RESULT_ListLinearBind_= $$; }
  | LinearBind _SYMB_30 ListLinearBind { $$ = make_ListLinearBind($1, $3); YY_RESULT_ListLinearBind_= $$; }
;
ReceiptRepeatedImpl : ListRepeatedBind { $$ = make_RepeatedSimple($1); YY_RESULT_ReceiptRepeatedImpl_= $$; }
;
RepeatedBind : ListName NameRemainder _SYMB_17 Name { $$ = make_RepeatedBindImpl($1, $2, $4); YY_RESULT_RepeatedBind_= $$; }
;
ListRepeatedBind : RepeatedBind { $$ = make_ListRepeatedBind($1, 0); YY_RESULT_ListRepeatedBind_= $$; }
  | RepeatedBind _SYMB_30 ListRepeatedBind { $$ = make_ListRepeatedBind($1, $3); YY_RESULT_ListRepeatedBind_= $$; }
;
ReceiptPeekImpl : ListPeekBind { $$ = make_PeekSimple($1); YY_RESULT_ReceiptPeekImpl_= $$; }
;
PeekBind : ListName NameRemainder _SYMB_31 Name { $$ = make_PeekBindImpl($1, $2, $4); YY_RESULT_PeekBind_= $$; }
;
ListPeekBind : PeekBind { $$ = make_ListPeekBind($1, 0); YY_RESULT_ListPeekBind_= $$; }
  | PeekBind _SYMB_30 ListPeekBind { $$ = make_ListPeekBind($1, $3); YY_RESULT_ListPeekBind_= $$; }
;
Send : _SYMB_32 { $$ = make_SendSingle(); YY_RESULT_Send_= $$; }
  | _SYMB_33 { $$ = make_SendMultiple(); YY_RESULT_Send_= $$; }
;
Branch : ReceiptLinearImpl _SYMB_34 Proc3 { $$ = make_BranchImpl($1, $3); YY_RESULT_Branch_= $$; }
;
ListBranch : Branch { $$ = make_ListBranch($1, 0); YY_RESULT_ListBranch_= $$; }
  | Branch ListBranch { $$ = make_ListBranch($1, $2); YY_RESULT_ListBranch_= $$; }
;
Case : Proc13 _SYMB_34 Proc3 { $$ = make_CaseImpl($1, $3); YY_RESULT_Case_= $$; }
;
ListCase : Case { $$ = make_ListCase($1, 0); YY_RESULT_ListCase_= $$; }
  | Case ListCase { $$ = make_ListCase($1, $2); YY_RESULT_ListCase_= $$; }
;
NameDecl : _SYMB_66 { $$ = make_NameDeclSimpl($1); YY_RESULT_NameDecl_= $$; }
  | _SYMB_66 _SYMB_7 _SYMB_65 _SYMB_8 { $$ = make_NameDeclUrn($1, $3); YY_RESULT_NameDecl_= $$; }
;
ListNameDecl : NameDecl { $$ = make_ListNameDecl($1, 0); YY_RESULT_ListNameDecl_= $$; }
  | NameDecl _SYMB_24 ListNameDecl { $$ = make_ListNameDecl($1, $3); YY_RESULT_ListNameDecl_= $$; }
;
BoolLiteral : _SYMB_62 { $$ = make_BoolTrue(); YY_RESULT_BoolLiteral_= $$; }
  | _SYMB_52 { $$ = make_BoolFalse(); YY_RESULT_BoolLiteral_= $$; }
;
Ground : BoolLiteral { $$ = make_GroundBool($1); YY_RESULT_Ground_= $$; }
  | _SYMB_63 { $$ = make_GroundInt($1); YY_RESULT_Ground_= $$; }
  | _SYMB_64 { $$ = make_GroundString($1); YY_RESULT_Ground_= $$; }
  | _SYMB_65 { $$ = make_GroundUri($1); YY_RESULT_Ground_= $$; }
;
Collection : _SYMB_35 ListProc ProcRemainder _SYMB_36 { $$ = make_CollectList($2, $3); YY_RESULT_Collection_= $$; }
  | Tuple { $$ = make_CollectTuple($1); YY_RESULT_Collection_= $$; }
  | _SYMB_44 _SYMB_7 ListProc ProcRemainder _SYMB_8 { $$ = make_CollectSet($3, $4); YY_RESULT_Collection_= $$; }
  | _SYMB_0 ListKeyValuePair ProcRemainder _SYMB_1 { $$ = make_CollectMap($2, $3); YY_RESULT_Collection_= $$; }
;
KeyValuePair : Proc _SYMB_37 Proc { $$ = make_KeyValuePairImpl($1, $3); YY_RESULT_KeyValuePair_= $$; }
;
ListKeyValuePair : /* empty */ { $$ = 0; YY_RESULT_ListKeyValuePair_= $$; }
  | KeyValuePair { $$ = make_ListKeyValuePair($1, 0); YY_RESULT_ListKeyValuePair_= $$; }
  | KeyValuePair _SYMB_24 ListKeyValuePair { $$ = make_ListKeyValuePair($1, $3); YY_RESULT_ListKeyValuePair_= $$; }
;
Tuple : _SYMB_7 Proc _SYMB_38 { $$ = make_TupleSingle($2); YY_RESULT_Tuple_= $$; }
  | _SYMB_7 Proc _SYMB_24 ListProc _SYMB_8 { $$ = make_TupleMultiple($2, $4); YY_RESULT_Tuple_= $$; }
;
ProcRemainder : _SYMB_39 ProcVar { $$ = make_ProcRemainderVar($2); YY_RESULT_ProcRemainder_= $$; }
  | /* empty */ { $$ = make_ProcRemainderEmpty(); YY_RESULT_ProcRemainder_= $$; }
;
NameRemainder : _SYMB_39 _SYMB_26 ProcVar { $$ = make_NameRemainderVar($3); YY_RESULT_NameRemainder_= $$; }
  | /* empty */ { $$ = make_NameRemainderEmpty(); YY_RESULT_NameRemainder_= $$; }
;
VarRefKind : _SYMB_22 { $$ = make_VarRefKindProc(); YY_RESULT_VarRefKind_= $$; }
  | _SYMB_22 _SYMB_5 { $$ = make_VarRefKindName(); YY_RESULT_VarRefKind_= $$; }
;
SimpleType : _SYMB_40 { $$ = make_SimpleTypeBool(); YY_RESULT_SimpleType_= $$; }
  | _SYMB_42 { $$ = make_SimpleTypeInt(); YY_RESULT_SimpleType_= $$; }
  | _SYMB_45 { $$ = make_SimpleTypeString(); YY_RESULT_SimpleType_= $$; }
  | _SYMB_46 { $$ = make_SimpleTypeUri(); YY_RESULT_SimpleType_= $$; }
  | _SYMB_41 { $$ = make_SimpleTypeByteArray(); YY_RESULT_SimpleType_= $$; }
;

%%

void yyerror(const char *str)
{
  extern char *rholang_mercury_text;
  fprintf(stderr,"error: %d,%d: %s at %s\n",
  rholang_mercury_lloc.first_line, rholang_mercury_lloc.first_column, str, rholang_mercury_text);
}

