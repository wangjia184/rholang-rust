/**
 * Rholang Term Structure
 *
 * The top level is `Par`.
 */
syntax = "proto3";

package rho_types;
import "bitset.proto";

// source code position
message SourcePosition {
    // line number
    int32 row = 1;
    // char offset
    int32 col = 2;
    // length, 0 if unknown
    int32 len = 3;
}

enum SyntaxErrorKind {
    IntegerNumberError = 0;
    UnexpectedNameContext = 1;
    UnexpectedProcessContext = 2;
    UnexpectedReuseOfNameContextFree = 3;
    UnexpectedReuseOfProcessContextFree = 4;
    EmptyUri = 5;
}

// syntax error in source code
message SyntaxError {
    // kind of this error
    SyntaxErrorKind kind = 1;

    // error message 
    string message = 2;

    // source code location
    SourcePosition position = 3;

    // contra location 
    SourcePosition contra_position = 4;
}

enum CompiliationErrorKind {
    UnrecognizedToken = 0;
    UnrecognizedData = 1;
    SystemError = 2;
    Utf8Error = 3;
    NullPointer = 4;
    UnsupportedVarSort = 5;
    InvalidFileHandle = 6;
    NotImplemented = 7;
}


message CompiliationError {
    // error type
    CompiliationErrorKind kind = 1;

    // error message
    string message = 2;
    
    // source code location
    SourcePosition position = 3;

    // contra location 
    SourcePosition contra_position = 4;
}

// Result of normalization
message NormalizeResult {
    // Fatal error encountered in compiliation
    CompiliationError compiliation_error = 1;

    // Syntax error occured in compiliation
    repeated SyntaxError syntax_errors = 2;

    // When there is no fatal errors, this is the root par
    Par par = 4;
}


enum ExecutionErrorKind {
    Aborted = 0;  // aborted because an error is detected
    InvalidExpression = 1;
    ArithmeticOverflow = 2;
    UnexpectedOperand = 3;
    UndefinedOperator = 4;
    InvalidSend = 5;
    InvalidReceive = 6;
    InvalidMatch = 7;
    InvalidBundle = 8;
    NonWritableChannel = 9;
    NonReadableChannel = 10;
    IllegalSubstitution = 11;
    UnboundVariable = 12;
    InvalidMatch = 13;
    SystemFailure = 999;
}

message ExecutionError {
    // error type
    ExecutionErrorKind kind = 1;

    // error message
    string message = 2;
}



/**
 * Rholang process
 *
 * For example, `@0!(1) | @2!(3) | for(x <- @0) { Nil }` has two sends
 * and one receive.
 *
 * The Nil process is a `Par` with no sends, receives, etc.
 */
message Par {
    repeated Send sends = 1;
    repeated Receive receives = 2;
    repeated New news = 4;
    repeated Expr exprs = 5;
    repeated Match matches = 6;
    repeated GUnforgeable unforgeables = 7;  // unforgeable names
    repeated Bundle bundles = 11;
    repeated Connective connectives = 8;
    bitset.BitSet locallyFree = 9 ;//[(scalapb.field).type = "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"];
    bool connective_used = 10;
}

/**
 * Either rholang code or code built in to the interpreter.
 */
/*
message TaggedContinuation {
    oneof tagged_cont {
        ParWithRandom par_body = 1;
        int64 scala_body_ref = 2;
    }
}
*/
/**
 * Rholang code along with the state of a split random number
 * generator for generating new unforgeable names.
 */
message ParWithRandom {
    Par body = 1 ;
    bytes randomState = 2 ;//[(scalapb.field).type = "coop.rchain.crypto.hash.Blake2b512Random"];
}

/**
 * Cost of the performed operations.
 */
message PCost {
    uint64 cost = 1;
}

message ListParWithRandom {
    repeated Par pars = 1;
    bytes randomState = 2 ;//[(scalapb.field).type = "coop.rchain.crypto.hash.Blake2b512Random"];
}

// While we use vars in both positions, when producing the normalized
// representation we need a discipline to track whether a var is a name or a
// process.
// These are DeBruijn levels
message Var {
    message WildcardMsg {}
    oneof var_instance {
        sint32 bound_var = 1;
        sint32 free_var = 2;
        WildcardMsg wildcard = 3;
    }
}

/**
 * Nothing can be received from a (quoted) bundle with `readFlag = false`.
 * Likeise nothing can be sent to a (quoted) bundle with `writeFlag = false`.
 *
 * If both flags are set to false, bundle allows only for equivalance check.
 */
message Bundle {
    Par body = 1 ;
    bool writeFlag = 2; // flag indicating whether bundle is writeable
    bool readFlag = 3; // flag indicating whether bundle is readable
}

/**
 * A send is written `chan!(data)` or `chan!!(data)` for a persistent send.
 *
 * Upon send, all free variables in data are substituted with their values.
 */
message Send {
    Par chan = 1 ;
    repeated Par data = 2;
    bool persistent = 3;
    bitset.BitSet locallyFree = 5 ;//[(scalapb.field).type = "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"];
    bool connective_used = 6;
}

message ReceiveBind {
    repeated Par patterns = 1;
    Par source = 2 ;
    Var remainder = 3;
    int32 freeCount = 4;
}

message BindPattern {
    repeated Par patterns = 1;
    Var remainder = 2;
    int32 freeCount = 3;
}

message ListBindPatterns {
    repeated BindPattern patterns = 1;
}

/**
 * A receive is written `for(binds) { body }`
 * i.e. `for(patterns <- source) { body }`
 * or for a persistent recieve: `for(patterns <= source) { body }`.
 *
 * It's an error for free Variable to occur more than once in a pattern.
 */
message Receive {
    repeated ReceiveBind binds = 1;
    Par body = 2 ;
    bool persistent = 3;
    bool peek = 4;
    int32 bindCount = 5;
    bitset.BitSet locallyFree = 6 ;//[(scalapb.field).type = "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"];
    bool connective_used = 7;
}

// Number of variables bound in the new statement.
// For normalized form, p should not contain solely another new.
// Also for normalized form, the first use should be level+0, next use level+1
// up to level+count for the last used variable.
message New {
    // Includes any uris listed below. This makes it easier to substitute or walk a term.
    sint32 bindCount = 1;
    Par p = 2 ;
    // For normalization, uri-referenced variables come at the end, and in lexicographical order.
    repeated string uri = 3;
    map<string, Par> injections = 4;
    bitset.BitSet locallyFree = 5 ;//[(scalapb.field).type = "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"];
}

message MatchCase {
    Par pattern = 1 ;
    Par source = 2 ;
    int32 freeCount = 3;
}

message Match {
    Par target = 1 ;
    repeated MatchCase cases = 2;
    bitset.BitSet locallyFree = 4 ;//[(scalapb.field).type = "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"];
    bool connective_used = 5;
}

// Any process may be an operand to an expression.
// Only processes equivalent to a ground process of compatible type will reduce.
message Expr {
    oneof expr_instance {
        bool g_bool = 1;
        sint64 g_int = 2;
        string g_string = 3;
        string g_uri = 4;
        bytes g_byte_array = 25;

        ENot e_not_body = 5;
        ENeg e_neg_body = 6;
        EMult e_mult_body = 7;
        EDiv e_div_body = 8;
        EPlus e_plus_body = 9;
        EMinus e_minus_body = 10;
        ELt e_lt_body = 11;
        ELte e_lte_body = 12;
        EGt e_gt_body = 13;
        EGte e_gte_body = 14;
        EEq e_eq_body = 15;
        ENeq e_neq_body = 16;
        EAnd e_and_body = 17;
        EOr e_or_body = 18;
        EVar e_var_body = 19;

        EList e_list_body = 20;
        ETuple e_tuple_body = 21;
        ESet e_set_body = 22 ;//[(scalapb.field).type = "coop.rchain.models.ParSet"];
        EMap e_map_body = 23 ;//[(scalapb.field).type = "coop.rchain.models.ParMap"];
        EMethod e_method_body = 24;

        EMatches e_matches_body = 27;
        EPercentPercent e_percent_percent_body = 28; // string interpolation
        EPlusPlus e_plus_plus_body = 29; // concatenation
        EMinusMinus e_minus_minus_body = 30;  // set difference

        EMod e_mod_body = 31;
    }
}

message EList {
    repeated Par ps = 1;
    bitset.BitSet locallyFree = 3 ;//[(scalapb.field).type = "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"];
    bool connective_used = 4;
    Var remainder = 5;
}

message ETuple {
    repeated Par ps = 1;
    bitset.BitSet locallyFree = 3 ;//[(scalapb.field).type = "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"];
    bool connective_used = 4;
}

message ESet {
    repeated Par ps = 1;
    bitset.BitSet locallyFree = 3 ;//[(scalapb.field).type = "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"];
    bool connective_used = 4;
    Var remainder = 5;
}

message EMap {
    repeated KeyValuePair kvs = 1;
    bitset.BitSet locallyFree = 3 ;//[(scalapb.field).type = "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"];
    bool connective_used = 4;
    Var remainder = 5;
}

/**
 * `target.method(arguments)`
 */
message EMethod {
    string methodName = 1;
    Par target = 2 ;
    repeated Par arguments = 3;
    bitset.BitSet locallyFree = 5 ;//[(scalapb.field).type = "coop.rchain.models.AlwaysEqual[scala.collection.immutable.BitSet]"];
    bool connective_used = 6;
}

message KeyValuePair {
    Par key = 1 ;
    Par value = 2 ;
}

// A variable used as a var should be bound in a process context, not a name
// context. For example:
// `for (@x <- c1; @y <- c2) { z!(x + y) }` is fine, but
// `for (x <- c1; y <- c2) { z!(x + y) }` should raise an error.
message EVar {
    Var v = 1 ;
}

message ENot {
    Par p = 1 ;
}

message ENeg {
    Par p = 1 ;
}

message EMult {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

message EDiv {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

message EMod {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

message EPlus {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

message EMinus {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

message ELt {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

message ELte {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

message EGt {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

message EGte {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

message EEq {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

message ENeq {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

message EAnd {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

message EOr {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

message EMatches {
    Par target = 1 ;
    Par pattern = 2 ;
}

/**
 * String interpolation
 *
 * `"Hello, {name}" %% {"name": "Bob"}` denotes `"Hello, Bob"`
 */
message EPercentPercent {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

// Concatenation
message EPlusPlus {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

// Set difference
message EMinusMinus {
    Par p1 = 1 ;
    Par p2 = 2 ;
}

message Connective {
  oneof connective_instance {
    ConnectiveBody conn_and_body = 1;
    ConnectiveBody conn_or_body = 2;
    Par conn_not_body = 3;
    VarRef var_ref_body = 4;
    bool conn_bool = 5;
    bool conn_int = 6;
    bool conn_string = 7;
    bool conn_uri = 8;
    bool conn_byte_array = 9;
  }
}

message VarRef {
  sint32 index = 1;
  sint32 depth = 2;
}

message ConnectiveBody {
    repeated Par ps = 1;
}

message DeployId {
     bytes sig = 1;
}

message DeployerId {
    bytes publicKey = 1;
}

// Unforgeable names resulting from `new x { ... }`
// These should only occur as the program is being evaluated. There is no way in
// the grammar to construct them.
message GUnforgeable {
    oneof unf_instance {
        GPrivate g_private_body = 1;
        GDeployId g_deploy_id_body = 2;
        GDeployerId g_deployer_id_body = 3;
        GSysAuthToken g_sys_auth_token_body = 4;
    }
}

message GPrivate {
    bytes id = 1;
}

message GDeployId {
    bytes sig = 1;
}

message GDeployerId {
    bytes publicKey = 1;
}

message GSysAuthToken {}
