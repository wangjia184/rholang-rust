/* -*- c -*- This FLex file was machine-generated by the BNF converter */

%option noyywrap noinput nounput
%option reentrant bison-bridge bison-locations

%top{
/* strdup was not in the ISO C standard before 6/2019 (C2x), but in POSIX 1003.1.
 * See: https://en.cppreference.com/w/c/experimental/dynamic/strdup
 * Setting _POSIX_C_SOURCE to 200809L activates strdup in string.h.
 */
#define _POSIX_C_SOURCE 200809L
}
%{
#include "Absyn.h"
#include "Bison.h"

#define init_lexer rholang_mercury__init_lexer

static void update_loc(YYLTYPE* loc, char* text)
{
  loc->first_line = loc->last_line;
  loc->first_column = loc->last_column;
  int i = 0;
  for (; text[i] != '\0'; ++i) {
      if (text[i] == '\n') {
          ++loc->last_line;
          loc->last_column = 0;
      } else {
          ++loc->last_column;
      }
  }
}
#define YY_USER_ACTION update_loc(yylloc, yytext);

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START CHAR CHARESC CHAREND STRING ESCAPED COMMENT

%%  /* Rules. */

<INITIAL>"{"      	 return _SYMB_0;
<INITIAL>"}"      	 return _SYMB_1;
<INITIAL>"~"      	 return _SYMB_2;
<INITIAL>"/\\"      	 return _SYMB_3;
<INITIAL>"\\/"      	 return _SYMB_4;
<INITIAL>"*"      	 return _SYMB_5;
<INITIAL>"."      	 return _SYMB_6;
<INITIAL>"("      	 return _SYMB_7;
<INITIAL>")"      	 return _SYMB_8;
<INITIAL>"-"      	 return _SYMB_9;
<INITIAL>"/"      	 return _SYMB_10;
<INITIAL>"%"      	 return _SYMB_11;
<INITIAL>"%%"      	 return _SYMB_12;
<INITIAL>"+"      	 return _SYMB_13;
<INITIAL>"++"      	 return _SYMB_14;
<INITIAL>"--"      	 return _SYMB_15;
<INITIAL>"<"      	 return _SYMB_16;
<INITIAL>"<="      	 return _SYMB_17;
<INITIAL>">"      	 return _SYMB_18;
<INITIAL>">="      	 return _SYMB_19;
<INITIAL>"=="      	 return _SYMB_20;
<INITIAL>"!="      	 return _SYMB_21;
<INITIAL>"="      	 return _SYMB_22;
<INITIAL>"|"      	 return _SYMB_23;
<INITIAL>","      	 return _SYMB_24;
<INITIAL>"_"      	 return _SYMB_25;
<INITIAL>"@"      	 return _SYMB_26;
<INITIAL>"bundle+"      	 return _SYMB_27;
<INITIAL>"bundle-"      	 return _SYMB_28;
<INITIAL>"<-"      	 return _SYMB_29;
<INITIAL>";"      	 return _SYMB_30;
<INITIAL>"<<-"      	 return _SYMB_31;
<INITIAL>"!"      	 return _SYMB_32;
<INITIAL>"!!"      	 return _SYMB_33;
<INITIAL>"=>"      	 return _SYMB_34;
<INITIAL>"["      	 return _SYMB_35;
<INITIAL>"]"      	 return _SYMB_36;
<INITIAL>":"      	 return _SYMB_37;
<INITIAL>",)"      	 return _SYMB_38;
<INITIAL>"..."      	 return _SYMB_39;
<INITIAL>"Bool"      	 return _SYMB_40;
<INITIAL>"ByteArray"      	 return _SYMB_41;
<INITIAL>"Int"      	 return _SYMB_42;
<INITIAL>"Nil"      	 return _SYMB_43;
<INITIAL>"Set"      	 return _SYMB_44;
<INITIAL>"String"      	 return _SYMB_45;
<INITIAL>"Uri"      	 return _SYMB_46;
<INITIAL>"and"      	 return _SYMB_47;
<INITIAL>"bundle"      	 return _SYMB_48;
<INITIAL>"bundle0"      	 return _SYMB_49;
<INITIAL>"contract"      	 return _SYMB_50;
<INITIAL>"else"      	 return _SYMB_51;
<INITIAL>"false"      	 return _SYMB_52;
<INITIAL>"for"      	 return _SYMB_53;
<INITIAL>"if"      	 return _SYMB_54;
<INITIAL>"in"      	 return _SYMB_55;
<INITIAL>"match"      	 return _SYMB_56;
<INITIAL>"matches"      	 return _SYMB_57;
<INITIAL>"new"      	 return _SYMB_58;
<INITIAL>"not"      	 return _SYMB_59;
<INITIAL>"or"      	 return _SYMB_60;
<INITIAL>"select"      	 return _SYMB_61;
<INITIAL>"true"      	 return _SYMB_62;

<INITIAL>"//"[^\n]* /* skip */; /* BNFC: comment "//" */
<INITIAL>"/*" BEGIN COMMENT;
<COMMENT>"*/" BEGIN INITIAL;
<COMMENT>.    /* skip */;
<COMMENT>[\n] /* skip */;

<INITIAL>{DIGIT}+    	 yylval->_string = strdup(yytext); return _SYMB_63;
<INITIAL>\"([^\"\\]|\\(\"|\\|n|t))*\"    	 yylval->_string = strdup(yytext); return _SYMB_64;
<INITIAL>`([^\\`]|\\(\\|`))*`    	 yylval->_string = strdup(yytext); return _SYMB_65;
<INITIAL>('|{LETTER})('|\_|({DIGIT}|{LETTER}))*|\_('|\_|({DIGIT}|{LETTER}))+    	 yylval->_string = strdup(yytext); return _SYMB_66;
<INITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<INITIAL>.      	 return _ERROR_;

%%  /* Initialization code. */

yyscan_t init_lexer(FILE *inp)
{
  yyscan_t scanner;
  if (yylex_init(&scanner)) return 0;
  if (inp) yyrestart(inp, scanner);
  return scanner;
}

