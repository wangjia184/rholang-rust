#ifndef ABSYN_HEADER
#define ABSYN_HEADER

/* C++ Abstract Syntax Interface generated by the BNF Converter.*/

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef char* String;
typedef char* Ident;
typedef char* LongLiteral;
typedef char* StringLiteral;
typedef char* UriLiteral;
typedef char* Var;

/********************   Forward Declarations    ***********************/

struct ListProc_;
typedef struct ListProc_ *ListProc;

struct ListName_;
typedef struct ListName_ *ListName;

struct ListLinearBind_;
typedef struct ListLinearBind_ *ListLinearBind;

struct ListRepeatedBind_;
typedef struct ListRepeatedBind_ *ListRepeatedBind;

struct ListPeekBind_;
typedef struct ListPeekBind_ *ListPeekBind;

struct ListBranch_;
typedef struct ListBranch_ *ListBranch;

struct ListCase_;
typedef struct ListCase_ *ListCase;

struct ListNameDecl_;
typedef struct ListNameDecl_ *ListNameDecl;

struct ListKeyValuePair_;
typedef struct ListKeyValuePair_ *ListKeyValuePair;

struct Proc_;
typedef struct Proc_ *Proc;

struct ProcVar_;
typedef struct ProcVar_ *ProcVar;

struct Name_;
typedef struct Name_ *Name;

struct Bundle_;
typedef struct Bundle_ *Bundle;

struct Receipt_;
typedef struct Receipt_ *Receipt;

struct ReceiptLinearImpl_;
typedef struct ReceiptLinearImpl_ *ReceiptLinearImpl;

struct LinearBind_;
typedef struct LinearBind_ *LinearBind;

struct ReceiptRepeatedImpl_;
typedef struct ReceiptRepeatedImpl_ *ReceiptRepeatedImpl;

struct RepeatedBind_;
typedef struct RepeatedBind_ *RepeatedBind;

struct ReceiptPeekImpl_;
typedef struct ReceiptPeekImpl_ *ReceiptPeekImpl;

struct PeekBind_;
typedef struct PeekBind_ *PeekBind;

struct Send_;
typedef struct Send_ *Send;

struct Branch_;
typedef struct Branch_ *Branch;

struct Case_;
typedef struct Case_ *Case;

struct NameDecl_;
typedef struct NameDecl_ *NameDecl;

struct BoolLiteral_;
typedef struct BoolLiteral_ *BoolLiteral;

struct Ground_;
typedef struct Ground_ *Ground;

struct Collection_;
typedef struct Collection_ *Collection;

struct KeyValuePair_;
typedef struct KeyValuePair_ *KeyValuePair;

struct Tuple_;
typedef struct Tuple_ *Tuple;

struct ProcRemainder_;
typedef struct ProcRemainder_ *ProcRemainder;

struct NameRemainder_;
typedef struct NameRemainder_ *NameRemainder;

struct VarRefKind_;
typedef struct VarRefKind_ *VarRefKind;

struct SimpleType_;
typedef struct SimpleType_ *SimpleType;

/********************   Abstract Syntax Classes    ********************/

struct Proc_
{
  int line_number, char_number;
  enum { is_PGround, is_PCollect, is_PVar, is_PVarRef, is_PNil, is_PSimpleType, is_PNegation, is_PConjunction, is_PDisjunction, is_PEval, is_PMethod, is_PExprs, is_PNot, is_PNeg, is_PMult, is_PDiv, is_PMod, is_PPercentPercent, is_PAdd, is_PMinus, is_PPlusPlus, is_PMinusMinus, is_PLt, is_PLte, is_PGt, is_PGte, is_PMatches, is_PEq, is_PNeq, is_PAnd, is_POr, is_PSend, is_PContr, is_PInput, is_PChoice, is_PMatch, is_PBundle, is_PIf, is_PIfElse, is_PNew, is_PPar } kind;
  union
  {
    struct { Ground ground_; } pground_;
    struct { Collection collection_; } pcollect_;
    struct { ProcVar procvar_; } pvar_;
    struct { Var var_; VarRefKind varrefkind_; } pvarref_;
    struct { SimpleType simpletype_; } psimpletype_;
    struct { Proc proc_; } pnegation_;
    struct { Proc proc_1, proc_2; } pconjunction_;
    struct { Proc proc_1, proc_2; } pdisjunction_;
    struct { Name name_; } peval_;
    struct { ListProc listproc_; Proc proc_; Var var_; } pmethod_;
    struct { Proc proc_; } pexprs_;
    struct { Proc proc_; } pnot_;
    struct { Proc proc_; } pneg_;
    struct { Proc proc_1, proc_2; } pmult_;
    struct { Proc proc_1, proc_2; } pdiv_;
    struct { Proc proc_1, proc_2; } pmod_;
    struct { Proc proc_1, proc_2; } ppercentpercent_;
    struct { Proc proc_1, proc_2; } padd_;
    struct { Proc proc_1, proc_2; } pminus_;
    struct { Proc proc_1, proc_2; } pplusplus_;
    struct { Proc proc_1, proc_2; } pminusminus_;
    struct { Proc proc_1, proc_2; } plt_;
    struct { Proc proc_1, proc_2; } plte_;
    struct { Proc proc_1, proc_2; } pgt_;
    struct { Proc proc_1, proc_2; } pgte_;
    struct { Proc proc_1, proc_2; } pmatches_;
    struct { Proc proc_1, proc_2; } peq_;
    struct { Proc proc_1, proc_2; } pneq_;
    struct { Proc proc_1, proc_2; } pand_;
    struct { Proc proc_1, proc_2; } por_;
    struct { ListProc listproc_; Name name_; Send send_; } psend_;
    struct { ListName listname_; Name name_; NameRemainder nameremainder_; Proc proc_; } pcontr_;
    struct { Proc proc_; Receipt receipt_; } pinput_;
    struct { ListBranch listbranch_; } pchoice_;
    struct { ListCase listcase_; Proc proc_; } pmatch_;
    struct { Bundle bundle_; Proc proc_; } pbundle_;
    struct { Proc proc_1, proc_2; } pif_;
    struct { Proc proc_1, proc_2, proc_3; } pifelse_;
    struct { ListNameDecl listnamedecl_; Proc proc_; } pnew_;
    struct { Proc proc_1, proc_2; } ppar_;
  } u;
};

Proc make_PGround(Ground p0);
Proc make_PCollect(Collection p0);
Proc make_PVar(ProcVar p0);
Proc make_PVarRef(VarRefKind p0, Var p1);
Proc make_PNil(void);
Proc make_PSimpleType(SimpleType p0);
Proc make_PNegation(Proc p0);
Proc make_PConjunction(Proc p0, Proc p1);
Proc make_PDisjunction(Proc p0, Proc p1);
Proc make_PEval(Name p0);
Proc make_PMethod(Proc p0, Var p1, ListProc p2);
Proc make_PExprs(Proc p0);
Proc make_PNot(Proc p0);
Proc make_PNeg(Proc p0);
Proc make_PMult(Proc p0, Proc p1);
Proc make_PDiv(Proc p0, Proc p1);
Proc make_PMod(Proc p0, Proc p1);
Proc make_PPercentPercent(Proc p0, Proc p1);
Proc make_PAdd(Proc p0, Proc p1);
Proc make_PMinus(Proc p0, Proc p1);
Proc make_PPlusPlus(Proc p0, Proc p1);
Proc make_PMinusMinus(Proc p0, Proc p1);
Proc make_PLt(Proc p0, Proc p1);
Proc make_PLte(Proc p0, Proc p1);
Proc make_PGt(Proc p0, Proc p1);
Proc make_PGte(Proc p0, Proc p1);
Proc make_PMatches(Proc p0, Proc p1);
Proc make_PEq(Proc p0, Proc p1);
Proc make_PNeq(Proc p0, Proc p1);
Proc make_PAnd(Proc p0, Proc p1);
Proc make_POr(Proc p0, Proc p1);
Proc make_PSend(Name p0, Send p1, ListProc p2);
Proc make_PContr(Name p0, ListName p1, NameRemainder p2, Proc p3);
Proc make_PInput(Receipt p0, Proc p1);
Proc make_PChoice(ListBranch p0);
Proc make_PMatch(Proc p0, ListCase p1);
Proc make_PBundle(Bundle p0, Proc p1);
Proc make_PIf(Proc p0, Proc p1);
Proc make_PIfElse(Proc p0, Proc p1, Proc p2);
Proc make_PNew(ListNameDecl p0, Proc p1);
Proc make_PPar(Proc p0, Proc p1);

struct ListProc_
{
  Proc proc_;
  ListProc listproc_;
};

ListProc make_ListProc(Proc p1, ListProc p2);

struct ProcVar_
{
  int line_number, char_number;
  enum { is_ProcVarWildcard, is_ProcVarVar } kind;
  union
  {
    struct { Var var_; } procvarvar_;
  } u;
};

ProcVar make_ProcVarWildcard(void);
ProcVar make_ProcVarVar(Var p0);

struct Name_
{
  int line_number, char_number;
  enum { is_NameWildcard, is_NameVar, is_NameQuote } kind;
  union
  {
    struct { Var var_; } namevar_;
    struct { Proc proc_; } namequote_;
  } u;
};

Name make_NameWildcard(void);
Name make_NameVar(Var p0);
Name make_NameQuote(Proc p0);

struct ListName_
{
  Name name_;
  ListName listname_;
};

ListName make_ListName(Name p1, ListName p2);

struct Bundle_
{
  int line_number, char_number;
  enum { is_BundleWrite, is_BundleRead, is_BundleEquiv, is_BundleReadWrite } kind;
  union
  {
  } u;
};

Bundle make_BundleWrite(void);
Bundle make_BundleRead(void);
Bundle make_BundleEquiv(void);
Bundle make_BundleReadWrite(void);

struct Receipt_
{
  int line_number, char_number;
  enum { is_ReceiptLinear, is_ReceiptRepeated, is_ReceiptPeek } kind;
  union
  {
    struct { ReceiptLinearImpl receiptlinearimpl_; } receiptlinear_;
    struct { ReceiptRepeatedImpl receiptrepeatedimpl_; } receiptrepeated_;
    struct { ReceiptPeekImpl receiptpeekimpl_; } receiptpeek_;
  } u;
};

Receipt make_ReceiptLinear(ReceiptLinearImpl p0);
Receipt make_ReceiptRepeated(ReceiptRepeatedImpl p0);
Receipt make_ReceiptPeek(ReceiptPeekImpl p0);

struct ReceiptLinearImpl_
{
  int line_number, char_number;
  enum { is_LinearSimple } kind;
  union
  {
    struct { ListLinearBind listlinearbind_; } linearsimple_;
  } u;
};

ReceiptLinearImpl make_LinearSimple(ListLinearBind p0);

struct LinearBind_
{
  int line_number, char_number;
  enum { is_LinearBindImpl } kind;
  union
  {
    struct { ListName listname_; Name name_; NameRemainder nameremainder_; } linearbindimpl_;
  } u;
};

LinearBind make_LinearBindImpl(ListName p0, NameRemainder p1, Name p2);

struct ListLinearBind_
{
  LinearBind linearbind_;
  ListLinearBind listlinearbind_;
};

ListLinearBind make_ListLinearBind(LinearBind p1, ListLinearBind p2);

struct ReceiptRepeatedImpl_
{
  int line_number, char_number;
  enum { is_RepeatedSimple } kind;
  union
  {
    struct { ListRepeatedBind listrepeatedbind_; } repeatedsimple_;
  } u;
};

ReceiptRepeatedImpl make_RepeatedSimple(ListRepeatedBind p0);

struct RepeatedBind_
{
  int line_number, char_number;
  enum { is_RepeatedBindImpl } kind;
  union
  {
    struct { ListName listname_; Name name_; NameRemainder nameremainder_; } repeatedbindimpl_;
  } u;
};

RepeatedBind make_RepeatedBindImpl(ListName p0, NameRemainder p1, Name p2);

struct ListRepeatedBind_
{
  RepeatedBind repeatedbind_;
  ListRepeatedBind listrepeatedbind_;
};

ListRepeatedBind make_ListRepeatedBind(RepeatedBind p1, ListRepeatedBind p2);

struct ReceiptPeekImpl_
{
  int line_number, char_number;
  enum { is_PeekSimple } kind;
  union
  {
    struct { ListPeekBind listpeekbind_; } peeksimple_;
  } u;
};

ReceiptPeekImpl make_PeekSimple(ListPeekBind p0);

struct PeekBind_
{
  int line_number, char_number;
  enum { is_PeekBindImpl } kind;
  union
  {
    struct { ListName listname_; Name name_; NameRemainder nameremainder_; } peekbindimpl_;
  } u;
};

PeekBind make_PeekBindImpl(ListName p0, NameRemainder p1, Name p2);

struct ListPeekBind_
{
  PeekBind peekbind_;
  ListPeekBind listpeekbind_;
};

ListPeekBind make_ListPeekBind(PeekBind p1, ListPeekBind p2);

struct Send_
{
  int line_number, char_number;
  enum { is_SendSingle, is_SendMultiple } kind;
  union
  {
  } u;
};

Send make_SendSingle(void);
Send make_SendMultiple(void);

struct Branch_
{
  int line_number, char_number;
  enum { is_BranchImpl } kind;
  union
  {
    struct { Proc proc_; ReceiptLinearImpl receiptlinearimpl_; } branchimpl_;
  } u;
};

Branch make_BranchImpl(ReceiptLinearImpl p0, Proc p1);

struct ListBranch_
{
  Branch branch_;
  ListBranch listbranch_;
};

ListBranch make_ListBranch(Branch p1, ListBranch p2);

struct Case_
{
  int line_number, char_number;
  enum { is_CaseImpl } kind;
  union
  {
    struct { Proc proc_1, proc_2; } caseimpl_;
  } u;
};

Case make_CaseImpl(Proc p0, Proc p1);

struct ListCase_
{
  Case case_;
  ListCase listcase_;
};

ListCase make_ListCase(Case p1, ListCase p2);

struct NameDecl_
{
  int line_number, char_number;
  enum { is_NameDeclSimpl, is_NameDeclUrn } kind;
  union
  {
    struct { Var var_; } namedeclsimpl_;
    struct { UriLiteral uriliteral_; Var var_; } namedeclurn_;
  } u;
};

NameDecl make_NameDeclSimpl(Var p0);
NameDecl make_NameDeclUrn(Var p0, UriLiteral p1);

struct ListNameDecl_
{
  NameDecl namedecl_;
  ListNameDecl listnamedecl_;
};

ListNameDecl make_ListNameDecl(NameDecl p1, ListNameDecl p2);

struct BoolLiteral_
{
  int line_number, char_number;
  enum { is_BoolTrue, is_BoolFalse } kind;
  union
  {
  } u;
};

BoolLiteral make_BoolTrue(void);
BoolLiteral make_BoolFalse(void);

struct Ground_
{
  int line_number, char_number;
  enum { is_GroundBool, is_GroundInt, is_GroundString, is_GroundUri } kind;
  union
  {
    struct { BoolLiteral boolliteral_; } groundbool_;
    struct { LongLiteral longliteral_; } groundint_;
    struct { StringLiteral stringliteral_; } groundstring_;
    struct { UriLiteral uriliteral_; } grounduri_;
  } u;
};

Ground make_GroundBool(BoolLiteral p0);
Ground make_GroundInt(LongLiteral p0);
Ground make_GroundString(StringLiteral p0);
Ground make_GroundUri(UriLiteral p0);

struct Collection_
{
  int line_number, char_number;
  enum { is_CollectList, is_CollectTuple, is_CollectSet, is_CollectMap } kind;
  union
  {
    struct { ListProc listproc_; ProcRemainder procremainder_; } collectlist_;
    struct { Tuple tuple_; } collecttuple_;
    struct { ListProc listproc_; ProcRemainder procremainder_; } collectset_;
    struct { ListKeyValuePair listkeyvaluepair_; ProcRemainder procremainder_; } collectmap_;
  } u;
};

Collection make_CollectList(ListProc p0, ProcRemainder p1);
Collection make_CollectTuple(Tuple p0);
Collection make_CollectSet(ListProc p0, ProcRemainder p1);
Collection make_CollectMap(ListKeyValuePair p0, ProcRemainder p1);

struct KeyValuePair_
{
  int line_number, char_number;
  enum { is_KeyValuePairImpl } kind;
  union
  {
    struct { Proc proc_1, proc_2; } keyvaluepairimpl_;
  } u;
};

KeyValuePair make_KeyValuePairImpl(Proc p0, Proc p1);

struct ListKeyValuePair_
{
  KeyValuePair keyvaluepair_;
  ListKeyValuePair listkeyvaluepair_;
};

ListKeyValuePair make_ListKeyValuePair(KeyValuePair p1, ListKeyValuePair p2);

struct Tuple_
{
  int line_number, char_number;
  enum { is_TupleSingle, is_TupleMultiple } kind;
  union
  {
    struct { Proc proc_; } tuplesingle_;
    struct { ListProc listproc_; Proc proc_; } tuplemultiple_;
  } u;
};

Tuple make_TupleSingle(Proc p0);
Tuple make_TupleMultiple(Proc p0, ListProc p1);

struct ProcRemainder_
{
  int line_number, char_number;
  enum { is_ProcRemainderVar, is_ProcRemainderEmpty } kind;
  union
  {
    struct { ProcVar procvar_; } procremaindervar_;
  } u;
};

ProcRemainder make_ProcRemainderVar(ProcVar p0);
ProcRemainder make_ProcRemainderEmpty(void);

struct NameRemainder_
{
  int line_number, char_number;
  enum { is_NameRemainderVar, is_NameRemainderEmpty } kind;
  union
  {
    struct { ProcVar procvar_; } nameremaindervar_;
  } u;
};

NameRemainder make_NameRemainderVar(ProcVar p0);
NameRemainder make_NameRemainderEmpty(void);

struct VarRefKind_
{
  int line_number, char_number;
  enum { is_VarRefKindProc, is_VarRefKindName } kind;
  union
  {
  } u;
};

VarRefKind make_VarRefKindProc(void);
VarRefKind make_VarRefKindName(void);

struct SimpleType_
{
  int line_number, char_number;
  enum { is_SimpleTypeBool, is_SimpleTypeInt, is_SimpleTypeString, is_SimpleTypeUri, is_SimpleTypeByteArray } kind;
  union
  {
  } u;
};

SimpleType make_SimpleTypeBool(void);
SimpleType make_SimpleTypeInt(void);
SimpleType make_SimpleTypeString(void);
SimpleType make_SimpleTypeUri(void);
SimpleType make_SimpleTypeByteArray(void);


#endif
